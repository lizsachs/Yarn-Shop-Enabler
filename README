Yarn Store Enabler

This app looks at the data in a specified Raveler's notebook and displays statistics about the Raveler's yarn usage. A fiber enthusiast could use this data to help determine which or how much yarn to buy while shopping if they don't have a specific goal in mind (not that any knitters I know would buy yarn with no purpose intended...).  

You can view an instance running here: <http://blacktabi.elasticbeanstalk.com/>  (This instance might go down for a few minutes periodically because I'm still playing with new features and adding them as time permits)

After authenticating with Ravelry, the user can enter a Raveler's username.  The app will display a couple charts: a pie chart showing projects by type and a column chart showing how many projects used each standard weight of yarn.  After the charts are loaded, the user can click a slice of the pie to re-load the column chart showing only yarn used for projects of the specified type. Re-click the same pie to go back to the "All" view or click a new pie to see a different selection.

Technology
Grails 2.1.0 <http://grails.org/>
Dojo 1.6.1.7 <http://dojotoolkit.org/>
oauth 2.0.1 (grails Scribe plugin) <http://aiten.github.com/grails-oauth-scribe/>
Highcharts-2 <http://www.highcharts.com/>
Ravelry API


I wrote this app in Grails because it's the webapp framework I'm familiar with from my day job.  I'm currently hosting it on Amazon EC2 with AWS Elastic Beanstalk running Tomcat 7 - this is mainly because I didn't really have a place to host a web app already and was interested in checking out how the AWS free tier of services work.  Elastic Beanstalk turns out to be pretty slick - I was impressed that I was able to sign up for an account, upload my war file, and had my app up and running in a matter of minutes.

High level technical overview:
The current implementation of the Yarn Store Enabler (YSE) authenticates with Ravelry, then brings up a dialog where the user can enter the name of his/her favorite Raveler.  From here, I make an AJAX request to kick off my analysis and eventually populate the page.  I grab a list of the given user's projects from the Ravelry API, then iterate over them to gather data about the projects, project details, and patterns used. Once I've aggregated the data I want to chart, I return it to the Javascript layer to render a few Highcharts charts.



Overview of Code
enablerJavascript.js - I don't have a ton of JS; what I do have lives here.  There's a form submission to make the AJAX call for chart data, a function to drive the chart creation so that I can easily re-render them with filtered data, and a couple chart-construction functions.

ProjectDataController.groovy - I have a single controller class, which currently has methods for getting an oauth token and a generic "get data" method that makes calls to the calculation service methods.  I'm likely going to refactor this a bit soon to have separate methods for calculating a Raveler's project and stash data so that those can be loaded separately from the front end.  (There are a few stubbed out sections for stash metrics I haven't implemented yet)

CalculateService.groovy - This class drives the calculations necessary to populate my charts.  For the project data that's currently available, I have a slightly hairy method that iterates over the Raveler's projects and also pulls up project details and pattern data.  I iterate through keeping track of total number of projects with given yarn weight characteristics for each pattern type.  One thing that's inefficient about this method is that the current implementation of the Ravelry API doesn't have bulk calls, so to really aggregate this data I end up making potentially a large number of calls in quick succession.  It also means this data takes a few minutes to calculate.  Since I know this is an expensive iteration, I do the aggregation for all pattern types at once and pass maps for each type back to the front end so that re-rendering the charts is speedy once I've parsed the data once and I don't have to make a bunch of unnecessary and slow API calls while the user plays with the interactive charts.

I'll be adding more methods to the CalculateService class to run data aggregation for some other types of analysis in the near future. 

HttpService.groovy - I wrote this class to handle HTTP requests to the Ravelry API.  It's got a few methods that aren't in use yet that I have for future implementation.  So far I'm only making GET calls and handling cases that return errors by throwing an exception.  This either displays the barebones error on the main page if it's something unexpected or redirects to the index page if there's an authentication timeout.

Known Issues
* Resizing the page makes the graphs do bizarre things. The pie chart starts to look like a spider. Ick.
* I currently store the auth token in the session, so once the session times out the user has to re-authenticate. I figured nobody is going to be using this for large amounts of time, so I focused attention elsewhere given a short dev timeline.
* The pages are ugly because I didn't spend any time this week styling them.
* Brute force API calls to aggregate data are slow and make a lot of likely unnecessary database calls.  A bulk API call would be nice here, but I didn't want to make a request for complicated API calls for a toy project.

Further Development
I've been having fun with this project, so I'm bursting with ideas for further development
* add a drill down to the yarn weight chart so that users can see how much yardage they typically use for a given weight of yarn (this would also filter by project type if the main graph was already filtered)
* add some analysis of fiber type.  Casey just added this to the API, and I haven't had time to do much with it. I decided to leave it out for now because it would require doing a whole extra set of API calls to grab yarn objects, and I didn't want to slow the calculations down or hammer the database any more than I already am.
* add some charts based on stash - probably based around yarn weight and colors.
* I think it would be really cool to take these metrics to make recommendations for people who either don't want to deal with chart reading or don't have enough knitting/crochet knowledge to use the data themselves. I'm picturing an app that someone who loves a Raveler could use to get guidelines for gift shopping.  Rather than trying to sift through the charts, the app could recommend that a Raveler particularly likes blue sport-weight, or that if someone wanted to buy the Raveler yarn to make a hat they'd do well to consider brown worsted merinos.  The user could go to a yarn shop armed with this information to make more educated gift buying decisions.
* Taken to much further extremes, the app could likely be made smart enough to take data from the user's prior projects, stash, and queue to recommend patterns and general yarn attributes for full-kit gifting recommendations.  Happy holidays!